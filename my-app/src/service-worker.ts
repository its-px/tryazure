// /// <reference lib="WebWorker" />
// import {
//   cleanupOutdatedCaches,
//   precacheAndRoute,
//   createHandlerBoundToURL,
// } from "workbox-precaching";
// import { registerRoute, NavigationRoute } from "workbox-routing";

// // This is required for workbox precaching
// declare let self: ServiceWorkerGlobalScope;

// // Precache all assets generated by your build
// precacheAndRoute(self.__WB_MANIFEST);

// // Clean up old caches
// cleanupOutdatedCaches();

// self.skipWaiting();

// self.addEventListener("activate", (event) => {
//   event.waitUntil(self.clients.claim());
// });

// const handler = createHandlerBoundToURL("/index.html");
// const navigationRoute = new NavigationRoute(handler);
// registerRoute(navigationRoute);

// // Handle notification clicks
// self.addEventListener("notificationclick", (event) => {
//   console.log("Notification clicked:", event.notification);

//   event.notification.close();

//   //const urlToOpen = new URL("/account", self.location.origin);

//   event.waitUntil(
//     self.clients
//       .matchAll({ type: "window", includeUncontrolled: true })
//       .then((clients) => {
//         if (clients.length > 0) {
//           const client = clients[0];
//           client.postMessage({ type: "SHOW_ACCOUNT_PAGE" });
//           client.focus();
//         } else {
//           self.clients.openWindow("/");
//         }
//       })
//   );
// });
/// <reference lib="webworker" />
export {}; // Make this a module, so TS uses the correct scope

declare let self: ServiceWorkerGlobalScope & typeof globalThis;
import { precacheAndRoute, cleanupOutdatedCaches } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst, CacheFirst } from "workbox-strategies";
declare const __WB_MANIFEST: any;

cleanupOutdatedCaches();

// Injected by VitePWA at build time
precacheAndRoute(self.__WB_MANIFEST);

// Example: Cache API calls with NetworkFirst
registerRoute(
  ({ url }) => url.origin.includes("api."),
  new NetworkFirst({
    cacheName: "api-cache",
    networkTimeoutSeconds: 10,
  })
);

// Example: Cache images with CacheFirst
registerRoute(
  ({ request }) => request.destination === "image",
  new CacheFirst({
    cacheName: "image-cache",
    matchOptions: { ignoreVary: true },
  })
);

// Example: Listen for notifications and post messages to app
self.addEventListener("notificationclick", (event) => {
  event.notification.close();

  const targetUrl = event.notification.data?.url || "/";
  event.waitUntil(
    self.clients
      .matchAll({ type: "window", includeUncontrolled: true })
      .then((clientList) => {
        for (const client of clientList) {
          if ("focus" in client) {
            client.postMessage({ type: "SHOW_ACCOUNT_PAGE" }); // send to React listener
            return client.focus();
          }
        }
        if (self.clients.openWindow) {
          return self.clients.openWindow(targetUrl);
        }
      })
  );
});
